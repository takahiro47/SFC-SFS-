// Generated by CoffeeScript 1.4.0
(function() {

  $(function() {
    var $chromeTabsContainerShell, DEBUG, currentUri, getSaveData, initChromeTab, methods, registTabLink, setInitSaveData, setSaveData, token, version;
    setInitSaveData = function(data) {
      if (!getSaveData()) {
        return setSaveData(data);
      }
    };
    getSaveData = function() {
      if (localStorage['data'] === void 0) {
        return false;
      }
      return JSON.parse(localStorage['data']);
    };
    setSaveData = function() {
      return localStorage['data'] = JSON.stringify(data);
    };
    setInitSaveData({
      username: 't11593tt',
      password: ''
    });
    DEBUG = true;
    $chromeTabsContainerShell = $('.chrome-tabs-shell');
    initChromeTab = function(currentPageName) {
      if (currentPageName == null) {
        currentPageName = '履修授業';
      }
      chromeTabs.init({
        $shell: $chromeTabsContainerShell,
        minWidth: 45,
        maxWidth: 180
      });
      chromeTabs.addNewTab($chromeTabsContainerShell, {
        favicon: 'http://g.etfv.co/http://www.keio.ac.jp/',
        title: currentPageName,
        data: {
          timeAdded: +new Date()
        }
      });
      $chromeTabsContainerShell.bind('chromeTabRender', function() {
        var $currentTab;
        $currentTab = $chromeTabsContainerShell.find('.chrome-tab-current');
        if ($currentTab.length && window['console'] && console.log) {
          if (DEBUG) {
            return console.log('[CurrentTab info] index:', $currentTab.index(), ', title:', $.trim($currentTab.text()), ', data:', $currentTab.data('tabData').data());
          }
        }
      });
      return registTabLink();
    };
    registTabLink = function() {
      return ($(document)).on('click', 'a[href*="s_class_top.cgi"]', function(e) {
        var $this;
        $this = $(this);
        e.preventDefault();
        return chromeTabs.addNewTab($chromeTabsContainerShell, {
          favicon: 'http://g.etfv.co/http://www.keio.ac.jp/',
          title: $this.text(),
          data: {
            timeAdded: +new Date()
          }
        });
      });
    };
    version = '0.0.11';
    currentUri = '';
    token = [];
    methods = {
      init: function(options) {
        if (DEBUG) {
          console.log("init: called.");
        }
        if (DEBUG) {
          console.log(options);
        }
        methods.start();
        return methods.assignEventHandlers();
      },
      done: function() {
        if (DEBUG) {
          return console.log("done: called.");
        }
      },
      assignEventHandlers: function() {},
      alert: function(data) {
        if (DEBUG) {
          console.log("alert: called.");
        }
        return alert(data);
      },
      setCurrentUri: function() {
        if (DEBUG) {
          console.log("setCurrentUri: called.");
        }
        return currentUri = ($(location)).attr('href');
      },
      getCurrentUri: function(update) {
        if (update == null) {
          update = false;
        }
        if (update || (currentUri === '')) {
          return methods.setCurrentUri();
        } else {
          return currentUri;
        }
      },
      getUrlVars: function() {
        var hash, hashes, i, vars, _i, _ref;
        if (DEBUG) {
          console.log("getUrlVars: called.");
        }
        vars = [];
        hash = [];
        hashes = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&');
        /* DEBUG
        console.log window.location.href.slice(window.location.href.indexOf('?')+1)
        console.log window.location.href.slice(window.location.href.indexOf('?')+1).split('&')
        */

        for (i = _i = 0, _ref = hashes.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
          hash = hashes[i].split('=');
          vars.push(hash[0]);
          vars[hash[0]] = hash[1];
        }
        vars['term'] = '2013s';
        vars['fix'] = '1';
        vars['type'] = 's';
        vars['mode'] = '0';
        return vars;
      },
      setToken: function() {
        if (DEBUG) {
          console.log("setToken: called.");
        }
        return token = methods.getUrlVars();
      },
      checkLoginStatus: function(loginned) {
        var matchArr;
        if (loginned == null) {
          loginned = false;
        }
        if (DEBUG) {
          console.log("checkLoginStatus: called.");
        }
        /*
                when
                  'https://vu8.sfc.keio.ac.jp/sfc-sfs/',
                  'https://vu8.sfc.keio.ac.jp/sfc-sfs/index.cgi',
                  'https://vu8.sfc.keio.ac.jp/sfc-sfs/login.cgi',
                  'https://vu9.sfc.keio.ac.jp/sfc-sfs/'
        */

        matchArr = currentUri.match(/^(https?):\/\/vu(8|9).sfc.keio.ac.jp\/sfc-sfs\/((index|login)\.cgi)?/i);
        if (matchArr[1] === 'https') {
          if (matchArr[4] === 'login') {
            loginned = false;
            if (DEBUG) {
              console.log("You are now login process!");
            }
          } else if (matchArr[4] === 'index' || (matchArr[4] != null)) {
            loginned = false;
            if (DEBUG) {
              console.log("You are not loginned!");
            }
          } else {
            loginned = true;
            if (DEBUG) {
              console.log("You are loginned!");
            }
          }
        } else {
          loginned = true;
          if (DEBUG) {
            console.log("You are known status!");
          }
        }
        return loginned;
      },
      start: function() {
        if (DEBUG) {
          console.log("start: called.");
        }
        methods.setCurrentUri();
        methods.setToken();
        if (($('input[type="text"]')).val() !== '' && ($('input[type="password"]')).val() !== '') {
          ($('input[type="submit"]')).click();
        }
        if (methods.checkLoginStatus()) {
          if (DEBUG) {
            console.log("start: loginned.");
          }
          methods.htmlStructure();
          methods.createChromeTab();
          methods.loadScheduleTab();
          methods.assignEventHandlers();
        } else {
          if (DEBUG) {
            console.log("start: not loginned.");
          }
        }
        return methods.done();
      },
      htmlStructure: function() {
        var $article;
        if (DEBUG) {
          console.log("htmlStructure: called.");
        }
        ($('td[width~="1"], td[bgcolor~="#8ba1bd"], td[width~="14"]')).remove();
        ($('img[src$="page_top.gif"], img[src$="page_top_l.gif"], img[src$="page_bottom.gif"]')).closest('table').remove();
        ($('body > table')).each(function() {
          return ($(this)).wrap('<div class="container"></div>');
        });
        ($('.container:first-child')).addClass('header-container');
        ($('#footer')).closest('.container').addClass('footer-container');
        methods.initHeaderNavi();
        methods.initLoader();
        $article = $('td[width="790"]');
        $article.closest('.container').before('<div class="container article-container"><div class="article"></div></div>');
        ($('.article')).append($article.html());
        $article.closest('.container').remove();
        return methods.initSchedule();
      },
      initLoader: function() {
        if (DEBUG) {
          console.log("createLoader: called.");
        }
        return ($("td[width~='350']")).after("<td class='loader alpha0'></td>");
      },
      startLoader: function() {
        if (DEBUG) {
          console.log("startLoader: called.");
        }
        return ($(".loader")).removeClass('alpha1').addClass('alpha0');
      },
      stopLoader: function() {
        if (DEBUG) {
          console.log("stopLoader: called.");
        }
        return ($(".loader")).removeClass('alpha0').addClass('alpha1');
      },
      initHeaderNavi: function() {
        if (DEBUG) {
          console.log("headerNaviInitial: called.");
        }
        ($('.header-container')).prepend(function() {
          var elm, i, items, li, sfsBaseURL, tokenSet, _i;
          sfsBaseURL = '//vu8.sfc.keio.ac.jp/sfc-sfs/portal_s/s0';
          tokenSet = '?id=' + token['id'] + '&amp;type=' + token['type'] + '&amp;mode=' + token['mode'] + '&amp;lang=' + token['lang'];
          items = ['cource', 'plan', 'mentor', 'graduate'];
          elm = $('<div class="header-navi"></div>');
          li = [];
          li.push('<ul class="header-navi-items clearfix">');
          for (i = _i = 1; _i <= 4; i = ++_i) {
            li.push('<li class="header-navi-item item-' + items[i - 1] + '"><a href="' + sfsBaseURL + i + '.cgi' + tokenSet + '"></a></li>');
          }
          li.push('</ul>');
          return elm.append(li.join(""));
        });
        if (currentUri.match(/s01\.cgi/g)) {
          return ($('.item-cource')).addClass('item-current');
        } else if (currentUri.match(/s02\.cgi/g)) {
          return ($('.item-plan')).addClass('item-current');
        } else if (currentUri.match(/s03\.cgi/g)) {
          return ($('.item-mentor')).addClass('item-current');
        } else if (currentUri.match(/s04\.cgi/g)) {
          return ($('.item-graduate')).addClass('item-current');
        }
      },
      changeHeaderNavi: function(name) {
        if (DEBUG) {
          return console.log("headerNaviChange: called.");
        }
      },
      initSchedule: function() {
        var $target0, $target1, elm;
        if (DEBUG) {
          console.log("initSchedule: called.");
        }
        $target0 = $('.myschedule');
        $target1 = $('.mylist');
        elm = '<div class="btn-toolbar">\n  <div class="btn-group">\n    <a class="btn" href="#"><i class="icon-align-left"></i></a>\n    <a class="btn" href="#"><i class="icon-align-center"></i></a>\n    <a class="btn" href="#"><i class="icon-align-right"></i></a>\n    <a class="btn" href="#"><i class="icon-align-justify"></i></a>\n  </div>\n</div>';
        if ($target0[0] && $target1[0]) {
          return $target0.before(elm);
        }
      },
      createChromeTab: function(currentPageName) {
        if (currentPageName == null) {
          currentPageName = '履修授業';
        }
        if (DEBUG) {
          console.log("chromeTabCreate: called.");
        }
        ($('.header-container')).append("<div class=\"chrome-tabs-shell-container\">\n  <div class='chrome-tabs-shell'>\n    <div class='chrome-tabs'>\n      <div class='chrome-tab'>\n        <div class='chrome-tab-favicon'></div>\n        <div class='chrome-tab-title'>My時間割</div>\n        <div class='chrome-tab-curves'>\n          <div class='chrome-tab-curve-left-shadow2'></div>\n          <div class='chrome-tab-curve-left-shadow1'></div>\n          <div class='chrome-tab-curve-left'></div>\n          <div class='chrome-tab-curve-right-shadow2'></div>\n          <div class='chrome-tab-curve-right-shadow1'></div>\n          <div class='chrome-tab-curve-right'></div>\n        </div>\n      </div>\n      <div class='chrome-tab chrome-tab-current'>\n        <div class='chrome-tab-favicon'></div>\n        <div class='chrome-tab-title'>" + currentPageName + "</div>\n        <div class='chrome-tab-close'></div>\n        <div class='chrome-tab-curves'>\n          <div class='chrome-tab-curve-left-shadow2'></div>\n          <div class='chrome-tab-curve-left-shadow1'></div>\n          <div class='chrome-tab-curve-left'></div>\n          <div class='chrome-tab-curve-right-shadow2'></div>\n          <div class='chrome-tab-curve-right-shadow1'></div>\n          <div class='chrome-tab-curve-right'></div>\n        </div>\n      </div>\n    </div>\n    <div class='chrome-shell-bottom-bar'></div>\n  </div>\n</div>");
        return initChromeTab();
      },
      /*
          initChromeTab: (currentPageName = '履修授業') ->
              console.log "chromeTabInitial: called." if DEBUG
      
              chromeTabs.init
                $shell: $chromeTabsContainerShell
                minWidth: 45
                maxWidth: 180
              chromeTabs.addNewTab $chromeTabsContainerShell,
                favicon: 'http://g.etfv.co/http://www.keio.ac.jp/'
                title: currentPageName #'New Tab'
                data:
                  timeAdded: +new Date()
              $chromeTabsContainerShell.bind 'chromeTabRender', ->
                $currentTab = $chromeTabsContainerShell.find '.chrome-tab-current' #Search current tab
                if $currentTab.length and window['console'] and console.log #and DEBUG
                  console.log '[CurrentTab info] index:', $currentTab.index(), ', title:', $.trim($currentTab.text()), ', data:', $currentTab.data('tabData').data() if DEBUG
          registTabLink: -> #授業ページをChromeタブで開く
            ($ document).on 'click', 'a[href*="s_class_top.cgi"]', (e) ->
              $this = ($ @)
              #遷移なし
              e.preventDefault()
              #タブ追加
              chromeTabs.addNewTab $chromeTabsContainerShell,
                favicon: 'http://g.etfv.co/http://www.keio.ac.jp/'
                title: $this.text()
                data:
                  timeAdded: +new Date()
      */

      loadScheduleTab: function() {
        var base, tokens;
        if (DEBUG) {
          console.log("loadScheduleTab: called.");
        }
        base = '//vu8.sfc.keio.ac.jp/sfc-sfs/sfs_class/student/';
        tokens = '?id=' + token['id'] + '&amp;term=' + token['term'] + '&amp;fix=' + token['fix'] + '&amp;lang=' + token['lang'];
        ($('#frame_set')).after('<div class="myschedule">');
        ($('.myschedule')).load(base + 'view_timetable.cgi' + tokens + ' table', null, function(response, status, xhr) {
          var msg;
          if (status === "error") {
            msg = "Sorry but there was an error: ";
            return ($("#error")).html(msg + xhr.status + " " + xhr.statusText);
          }
        });
        ($('.myschedule')).after('<div class="mylist">');
        ($('.mylist')).load(base + 'view_list.cgi' + tokens + '#1 table', null, function(response, status, xhr) {
          var msg;
          if (status === "error") {
            msg = "Sorry but there was an error: ";
            return ($("#error")).html(msg + xhr.status + " " + xhr.statusText);
          }
        });
        return ($('#frame_set')).remove();
      }
      /*registPushStateEvent: ->
        #_href: //同一ページのpushState二重投稿防止用
        pushTargetHtml5 = '.article'
        pushTargetHtml4 = 'td[width="790"]'
        #初期ページのタイトルとHTMLを定義
        _default = {
          title: document.title,
          content: ($ pushTargetHtml5).html()
        };
        #PushState
        pushStateToggle = ->
          methods.startLoader() #show loader
          #
          request = $(@).attr "href"
          url = location.host
          thisProt = location.protocol
          relativePath = request.replace(thisProt,"").replace("//","").replace(url,"") #相対パス生成
          if relativePath is ""
            relativePath = "/" #相対パスが空だったときはスラッシュを代入
      
          #Callback
          after = ->
            methods.stopLoader() #hide loader
          #Refresh
          refreshInfo = ->
            if _href isnt request
              if window.history.pushState #pushStateが使えるブラウザなら
                history.pushState "", "", relativePath #pushStateでアドレスバーを変更
                #pageTitle = ($ "h1").text() #get page title as New page title
                #($ "title").text pageTitle #Change page title
                _href is request
              else #if is NOT supported pushState, open normaly
                window.location is request
      
            methods.registPushStateEvent.pushStateToggle.after() #afterを実行
          displayContent = ->
            #($ "html,body,td[width='350']").animate {scrollTop: 0}, 1000 #画面位置を上に戻す
            methods.registPushStateEvent.pushStateToggle.refreshInfo()
          loadContent = ->
            ($ pushTargetHtml5).load request+" "+pushTargetHtml4, methods.registPushStateEvent.pushStateToggle.displayContent
      
          methods.registPushStateEvent.pushStateToggle.loadContent()
      
          if window.history and window.history.pushState
            #PushState(リンクボタン押下時挙動)
           ($ document).on 'click', pushTargetHtml5+' #navigation a', methods.registPushStateEvent.pushStateToggle
           ($ document).on 'click', pushTargetHtml5+' #navigation a', (e) -> e.preventDefault() #リンク遷移無効化
      */

    };
    $.fn.sfcsfs = function(method, config) {
      var options;
      options = $.extend({
        backgroundColor: '#F00'
      }, config);
      return this.each(function() {
        var $this;
        $this = $(this);
        $this.css({
          'background-color': options.backgroundColor
        });
        if (methods[method]) {
          return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));
        } else if (typeof method === 'object' || !method) {
          return methods.init.apply(this, arguments);
        } else {
          return $.error('Method ' + method + ' does not exist on jQuery.sfcsfs');
        }
      });
    };
    return ($(window)).sfcsfs({
      'background-color': '#F00'
    });
    /*授業ページをChromeタブで開く
    ($ document).on 'click', 'a[href*="s_class_top.cgi"]', (e) ->
      $this = ($ @)
      #遷移なし
      e.preventDefault()
      #タブ追加
      chromeTabs.addNewTab $chromeTabsContainerShell,
        favicon: 'http://g.etfv.co/http://www.keio.ac.jp/'
        title: $this.text()
        data:
          timeAdded: +new Date()
    
    #授業ページをChromeタブで開く old
    ($ document).on 'click', '.myschedule td[bgcolor="#eeeeee"] a', (e) ->
      $this = ($ @)
      #遷移なし
      e.preventDefault()
      #タブ追加
      chromeTabs.addNewTab $chromeTabsContainerShell,
        favicon: 'http://g.etfv.co/http://www.keio.ac.jp/'
        title: $this.text()
        data:
          timeAdded: +new Date()
    */

  });

}).call(this);
